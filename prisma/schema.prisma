generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  PARTICIPANT
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  email     String   @unique
  password  String
  role      Role     @default(PARTICIPANT)
  createdAt DateTime @default(now())

  quizzes        Quiz[]          @relation("CreatedQuizzes")
  participations Participation[]
}

model Quiz {
  id          String   @id @default(uuid())
  title       String
  description String
  duration    Int      @default(30) // Duration in minutes
  creatorId   String
  createdAt   DateTime @default(now())

  creator   User       @relation("CreatedQuizzes", fields: [creatorId], references: [id])
  quizRooms QuizRoom[]
  questions Question[]
}

model QuizRoom {
  id         String    @id @default(uuid())
  quizId     String
  inviteCode String    @unique
  createdAt  DateTime  @default(now())
  startTime  DateTime?
  endTime    DateTime?

  quiz           Quiz            @relation(fields: [quizId], references: [id])
  participations Participation[]
}

model Participation {
  id         String   @id @default(uuid())
  userId     String
  quizRoomId String
  joinedAt   DateTime @default(now())
  score      Int      @default(0)
  completed  Boolean  @default(false)
  finishedAt DateTime?

  user           User              @relation(fields: [userId], references: [id])
  quizRoom       QuizRoom          @relation(fields: [quizRoomId], references: [id])
  participantAnswers ParticipantAnswer[]
}

enum CorrectOption {
  A
  B
  C
  D
}

model Question {
  id            String        @id @default(uuid())
  quizId        String
  text          String
  optionA       String
  optionB       String
  optionC       String
  optionD       String
  correctOption CorrectOption
  marks         Int
  createdAt     DateTime      @default(now())

  quiz               Quiz                @relation(fields: [quizId], references: [id])
  participantAnswers ParticipantAnswer[]
}

model ParticipantAnswer {
  id              String   @id @default(uuid())
  participationId String
  questionId      String
  selectedOption  String
  isCorrect       Boolean
  marks           Int
  answeredAt      DateTime @default(now())

  participation Participation @relation(fields: [participationId], references: [id])
  question      Question      @relation(fields: [questionId], references: [id])

  @@unique([participationId, questionId])
}
